// Name:           Tarun Thomas
// Student Number: 113605224
// Email:    	   tthomas60@myseneca.ca
// Section:        NCC

During this worshop, I implemented two template functions in total. ListArray Elements (const char *_title, const T *_arr, int_num) is the first template function.  This template function was passed to the format "ListArray Elements" ("All the cars:", C, 7);" by main.cpp in order to be used. This function accepts a variety of array types, titles, and array quantities and prints them to the console. Instead of utilising just one type of array, I can enter different types of arrays. The template function chooses the kind of array to be used as CPP compiles.    Inside the code, the abstract base class ReadWrite's operator "" function is initially called. This is because Car, Employee and Student class are inherited from ReadWrite class. And then determines what the real object is and finally calls the display() function of the corresponding object.

"bool search (Collection &_obj, const T1 *_arr, int_num, T2_key)" is the second way to create the template function. I then passed it using the main function "search (Cres, C, (sizeof(C) / sizeof(C[0]), "Tesla")". Collection is a template class, to start. What is more remarkable is that a Car, Student, or Employee class is given to the Collection template class as a type. As a result, the type names for the collection and array are the same. The template member function found in the template collection class was then used to add the data. Additionally, the type of the key value varies from class to class, thus I use a separate type name. As a result, the types are chosen during compilation, just like with the first template function.Then, a "==" operator is called for each class to compare if it matches. If it matches, call the template function "add" in the Collection class to add the data.

In conclusion, the benefit of using templates is the freedom to use different types in functions or classes. One additional thing to remember is that the abstract base class is implemented first, then many types of classes are inherited from it, and then it is implemented once more when numerous types of classes are implemented as a function of a template. Additionally, because the type is established during the compilation stage, the template is challenging to debug. As a result, you must be careful when writing the code at first. Since there are so many obstacles, I was able to go through them by attending this session and taking advantage of templates.