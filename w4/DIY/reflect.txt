Reflect:

Name: Tarun Thomas
Section: NCC
ID: 113605224
Date : 10-6-2023

 
This time, I was able to pick up techniques for dealing with objects similar to object-oriented programming. The constructor and destructor used in this LAB and DIY courses are among the things I studied. When an object is formed, the constructor is automatically invoked. A constructor can be implemented in a variety of ways. The constructor can be utilised by overloading it even though it has no return value. Additionally, I can establish default values and create a default constructor that calls the default values I set as soon as the constructor is called, or I can create a constructor that accepts parameters and puts the value into a member variable. In this LAB workshop, I overloaded the Canister object constructor into 3 cases. As a result, depending on the parameter you entered, the initialised value varied. Canister(), Canister(const char *contentName), or Canister(double height, double diameter, const char *contentName = nullptr) are a few examples. Additionally, when an object that was created is destroyed, the destructor function is automatically invoked. The constructor that was invoked and created should be destroyed. However, before the constructor is destroyed, any object with dynamic memory must be removed. So that's why I deleted a memory using the destructor. The destructor uses the same formatting as the constructor, putting quotation marks in front of object names like "Canister()." The destructor has no parameters or return value.   Also, during this workshop, I learned "this" keyword. The "this" keyword serves as a pointer to the object itself.  The "this" keyword can be used to make the code more readable if the names of the member variable and the parameter are similar. For instance, a member variable named "name" can be used as this.name = name; in a function that accepts "name" as an argument. It can also be helpful for recreating an item with a reference or for copying one object to another. The pointer is used as an operator to return an object. such as "return *this". Knowing exactly which item I'm referring to when I use the keyword "this" is a good idea. To make it easier to understand which object is pouring, I utilised the keyword "this" in the Pour section of this LAB lesson.