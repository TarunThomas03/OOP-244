/*
Name      : Tarun Thomas
 Email     : tthomas60@myseneca.ca
 Student ID: 113605224
 Date      : 12-7-2023
*/

REFLECT:

This workshop taught me how the new C++ function works. One of the key components of C++ is inheritance, which was just learned. Up until now, I had used member variables and functions to use several classes in a single class by utilising the "public" keyword. After understanding about inheritance, it was possible to use the parent class's member variables and functions, depending on the types being used. When I inherit something, I can choose the terms public, private, and protected. The parent class, often known as the default class, is the one that allows inheritance. 
Child classes or derived classes are terms for inherited classes. The "Is - a" relationship describes the connection between the base class and the derived class.In addition to their own instance variables and functions, derived classes also include variables and functions from the base class. They employ colons, keywords, and the names of parent classes when establishing the most significant derived classes. For instance, public MotorVehicle for class Truck. Additionally, a rule exists between the parent class and the derived class. The constructor of the derived class is always invoked after the constructor of the base class when producing an instance of the derived class.
However, the destructor of the derived class is invoked before the destructor of the base class when an instance of the derived class is terminated. Finally, and most significantly, the constructors of the base class can be called directly from those of the derived class. For instance, when I use a variable from the base class that is not in the derived class when I create an instance of the derived class. I can currently declare a motor vehicle as follows: MotorVehicle(_license, _year): Truck(const char *_license, int _year, double _capacity, const char *_address). This is comparable to the initial declaration of the derived class.
Finally, I overloaded the input and output in this workshop and implemented them to fit my code. These features were also used by the derived class and were inherited from the base class. Finally, I believed that employing inheritance during this training might be beneficial. I think I can connect the base class and additional derived classes that perform functions that are comparable to those of the base class without needing to declare variables or functions. Making a complex structure is challenging, of course, because my abilities are still insufficient. Even so, I was able to comprehend inheritance clearly throughout the session, and I was eager to put it to use in a variety of contexts and claim it as my own.
Additionally, when I advanced through milestone 1, I was able to obtain a value from the user and use that value to practise carrying out the needed action. Additionally, I could practise receiving values using both string and char. Without utilising string, I created the getcstr function, but when I did, I enjoyed and found it more convenient. Personally, I consider strings to be one of C++'s benefits. And because I now understand what the buffer is and what is inside, I am not embarrassed about how to handle it.