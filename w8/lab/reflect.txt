I was able to have a deeper understanding of the inheritance ideas I studied last week in this class . Additionally, I had the chance to learn more about C++'s polymorphism, which was fascinating. I finally had the opportunity to learn how to use the virtual function in C++. First, a virtual function is one that is defined by the word "virtual" alone. To replace the function of the base class from the derived class, such a virtual function is used. Additionally, when overriding a virtual function, the derived class's virtual function must be identical to the base class in terms of return type, parameter, and function name. Also, if I use these same virtual functions, my computers determine who the real objects are at runtime. This is called dynamic binding.

I can build a pure virtual function by adding some keywords to the virtual functions. Its form is virtual void getSpecs(std::istream &istr) = 0; for a pure virtual function. The term "abstract base class" refers to a class that only has pure virtual functions. This class is incapable of creating an instance and lacks a definition for a function. To put it another way, this class just provides the function's body for other derived classes to override. A concrete class is a class that overrides a pure virtual function. To serve the needs of the class, the function may replace a pure virtual function, and the class itself may construct an instance.  The destructor should be turned into a virtual function in cases where classes inherit from one another since both the actual and the underlying objects need to be destroyed.

It is likely for concepts like pure virtual functions, abstract base classes, and concrete classes to appear tough and feel complicated, however during this sessionÂ I was able to organise the notion clearly and practise sufficiently. Making an abstract base class, passing it down through numerous concrete classes, and redefining the function in my own unique method was extremely intriguing.
