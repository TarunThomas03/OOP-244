I started by adding reading and writing to files. Additionally, I skipped using the getline() function this time around. I had to read the file character by character. Including the new line (n). So, until I reached the file's end, I read every word using the get() function. To save the file, I dynamically allocated member variables of the character pointer type. In order to implement writing or reading files, the operator was overloaded. I used the overloaded operator to call the write virtual function. A virtual function called "write" had various outcomes based on the identity of the actual object.  The base class, Text Class, just shows the content, and HtmlText Class shows the normal file in html format. I implemented several more overload functions such as the [] operator and the = operator.

Finally, this workshop taught me a new word. The threes rule applies here. According to this rule, all three must be declared if the destructor, copy constructor, or copy assignment operator defined any one of the three. In essence, C++ offers the aforementioned three default functions. I will get memory leaks if I use dynamic allocation variables, though. This is so that shallow copies can be made via the copy constructor or copy assignment operator by default. Additionally, the allocated memory is not removed by the destructor. For these reasons, I carefully copied the RAM that was allocated and carefully deleted it before the programme ended. Since the HtmlText class inherits from the Text class, I also implemented a virtual destructor.


To correctly comprehend the functions and classes I had previously built, as well as the inheritance relationship between the classes, was the crucial component of the last milestone. Multiple functions were implemented to collect patient data, compute time, and store data by calling previously developed functions. The standby line was then modified based on the class type using a template function. My final achievement, in my opinion, was a recap of the second semester's lessons.